<?xml version="1.0" encoding="UTF-8"?>
<project default="susi" basedir="${rootDir}" name="luceeCore" ><!-- TODO maybe there is a better way for this -->
  <description>
        Build Lucee Core
  </description> 
  <property name="javaVersion" value="1.8"/>
  <property name="build.compiler" value="extJavac"/>
  <property name="agent" value="lucee.runtime.instrumentation.ExternalAgent"/>
  <property name="bundleName" value="Lucee Core"/>
  <property name="bundleSymbolicName" value="lucee.core"/>
   
  <property name="pack200"          value="false"/>


<!-- TODO get the version number from manifest.mf -->
  
  <!-- http://www.coldbox.org/download/testbox -->
  <tstamp>
      <format property="NOW" pattern="yyyy/MM/dd HH:mm:ss z" locale="en,GB"/>
  </tstamp> 
  
  <scriptdef name="pack200File" language="javascript">
     <attribute name="file" />
     <attribute name="doit" />
     <![CDATA[


     var trgJar = new java.io.File(attributes.get("file"));
     var doit = attributes.get("doit").equalsIgnoreCase("true");
     if(doit) {
     
      // prepare Pack200
      var packer = java.util.jar.Pack200.newPacker();

      // Initialize the state by setting the desired properties
      var p = packer.properties();
      p.put(java.util.jar.Pack200.Packer.EFFORT, "7");  // default is "5"
      p.put(java.util.jar.Pack200.Packer.SEGMENT_LIMIT, "-1");
      p.put(java.util.jar.Pack200.Packer.KEEP_FILE_ORDER, java.util.jar.Pack200.Packer.FALSE);
      p.put(java.util.jar.Pack200.Packer.MODIFICATION_TIME, java.util.jar.Pack200.Packer.LATEST);
      p.put(java.util.jar.Pack200.Packer.DEFLATE_HINT, java.util.jar.Pack200.Packer.FALSE);
      //p.put(java.util.jar.Pack200.Packer.CODE_ATTRIBUTE_PFX+"LineNumberTable", java.util.jar.Pack200.Packer.STRIP);
      p.put(java.util.jar.Pack200.Packer.UNKNOWN_ATTRIBUTE, java.util.jar.Pack200.Packer.ERROR);
    
      var name=trgJar.getName()+".pack.gz";
      var trgPack=new java.io.File( trgJar.getParentFile() , name);

      var is=null;
      var os=null;
      
      try {
        var echo = project.createTask( "echo" );
        echo.setMessage("- pack "+name);
        echo.perform();

        is = new java.util.jar.JarInputStream(new java.io.FileInputStream(trgJar));
        os=new java.util.zip.GZIPOutputStream(new java.io.FileOutputStream(trgPack));
        packer.pack(is, os);
        trgJar.delete();

      }
      finally {
        if(is!=null) {
          try {is.close();} catch(e) {}
        }
        if(os!=null) {
          try {os.close();} catch(e) {}
        }
      } 
    }
    ]]>
  </scriptdef>

  <scriptdef name="pack200Ext" language="javascript">
     <attribute name="file" />
     <attribute name="tmpdir" />
     <attribute name="doit" />
     <![CDATA[
     var strFile = attributes.get("file");
     var strTmpDir = attributes.get("tmpdir");
     

     var file = new java.io.File(strFile);
     var tmpDir = new java.io.File(strTmpDir);
     
     tmpDir.mkdirs();
    

     var doit = attributes.get("doit").equalsIgnoreCase("true");
     if(doit) {

     // extract jar
      var unzip = project.createTask( "unzip" );
      unzip.setSrc(file);
      unzip.setDest(tmpDir);
      unzip.perform();
      
      var echo = project.createTask( "echo" );
      echo.setMessage("- unzip "+strFile);
      echo.perform();
     
      // prepare Pack200
      var packer = java.util.jar.Pack200.newPacker();

      // Initialize the state by setting the desired properties
      var p = packer.properties();
      p.put(java.util.jar.Pack200.Packer.EFFORT, "7");  // default is "5"
      p.put(java.util.jar.Pack200.Packer.SEGMENT_LIMIT, "-1");
      p.put(java.util.jar.Pack200.Packer.KEEP_FILE_ORDER, java.util.jar.Pack200.Packer.FALSE);
      p.put(java.util.jar.Pack200.Packer.MODIFICATION_TIME, java.util.jar.Pack200.Packer.LATEST);
      p.put(java.util.jar.Pack200.Packer.DEFLATE_HINT, java.util.jar.Pack200.Packer.FALSE);
      //p.put(java.util.jar.Pack200.Packer.CODE_ATTRIBUTE_PFX+"LineNumberTable", java.util.jar.Pack200.Packer.STRIP);
      p.put(java.util.jar.Pack200.Packer.UNKNOWN_ATTRIBUTE, java.util.jar.Pack200.Packer.ERROR);
      


      var jarsDir = new java.io.File(tmpDir,"jars");
      if(!jarsDir.isDirectory())jarsDir = new java.io.File(tmpDir,"jar");
      if(!jarsDir.isDirectory())jarsDir = new java.io.File(tmpDir,"bundles");
      if(!jarsDir.isDirectory())jarsDir = new java.io.File(tmpDir,"bundle");
      if(!jarsDir.isDirectory())jarsDir = new java.io.File(tmpDir,"libs");
      if(!jarsDir.isDirectory())jarsDir = new java.io.File(tmpDir,"lib");

      var echo = project.createTask( "echo" );
      echo.setMessage("jars: "+jarsDir);
      echo.perform();



      if(jarsDir.isDirectory()) {

        var jars=jarsDir.listFiles();
        for(var i=0;i<jars.length;i++) {
          var trgJar=jars[i];
          if(!trgJar.getName().endsWith(".jar")) continue;

          var name=trgJar.getName()+".pack.gz";
          var trgPack=new java.io.File( trgJar.getParentFile() , name);

          var is=null;
          var os=null;
          
          try {
            var echo = project.createTask( "echo" );
            echo.setMessage("- pack "+name);
            echo.perform();


            is = new java.util.jar.JarInputStream(new java.io.FileInputStream(trgJar));
            os=new java.util.zip.GZIPOutputStream(new java.io.FileOutputStream(trgPack));
            packer.pack(is, os);
            trgJar.delete();

          }
          catch(e) {
            var echo = project.createTask( "echo" );
            echo.setMessage("- cannot pack "+trgPack);
            echo.perform();
            if(trgPack.isFile())trgPack.delete();
            // sometime a jar cannot be compressed, in that case we simply keep it as it is
          }
          finally {
            if(is!=null) {
              try {is.close();} catch(e) {}
            }
            if(os!=null) {
              try {os.close();} catch(e) {}
            }
          } // finally
        } // for

        var echo = project.createTask( "echo" );
        echo.setMessage("- zip "+strFile);
        echo.perform();

        var zip = project.createTask( "zip" );
        zip.setBasedir(tmpDir);
        zip.setDestFile(file);
        zip.perform();

     
      } // if
    } // do it
    ]]>
  </scriptdef>



  <macrodef name="echots">
    <attribute name="message"/>
    <sequential>
      <local name="timestamp" />
      <tstamp>
        <format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss" />
      </tstamp>
      <echo message="---------- ${timestamp} - @{message} ----------" />
    </sequential>
  </macrodef>

  <scriptdef name="unwrap" language="javascript">
     <attribute name="text" />
     <attribute name="property" />
     <![CDATA[
      var text = attributes.get("text");
      text=text.trim();
      if(text.startsWith('"') && text.endsWith('"')) {
        text=text.substring(1,text.length()-1);
      }
      project.setProperty(attributes.get("property"), text);
     ]]>
  </scriptdef>

  <scriptdef name="updatedate" language="javascript">
     <attribute name="text" />
     <attribute name="date" />
     <attribute name="property" />
     <![CDATA[
      var text = attributes.get("text");
      var date = attributes.get("date");
      
      var index=text.indexOf("lucee.core.release.date");
      if(index!=-1) {
        var start=text.indexOf('"',index);
        var end=text.indexOf('"',start+1);
        if(start!=-1 && end!=-1) {
          text=text.substring(0,start+1)+date+text.substring(end);
        }
      }

      project.setProperty(attributes.get("property"), text);
     ]]>
  </scriptdef>

  <scriptdef name="felix" language="javascript">
     <attribute name="property" />
     <attribute name="dependencies" />
     <attribute name="separator" />
     <![CDATA[
      var dep = attributes.get("dependencies");
      var sep = attributes.get("separator");
      var arr=dep.split(sep);
      
      var rtn="";
      for(var i=0;i<arr.length;i++){
        if(arr[i].indexOf("felix")!=-1) {
          rtn=arr[i];
          break;
        } 
      }

      var res=arr[0];
      project.setProperty(attributes.get("property"), rtn);
     ]]>
  </scriptdef>
  
  <scriptdef name="currentTime" language="javascript">
     <attribute name="property" />
     <![CDATA[
      project.setProperty(attributes.get("property"), new Date().getTime());
     ]]>
  </scriptdef>

  <scriptdef name="toFileName" language="javascript">
     <attribute name="id" />
     <attribute name="name" />
     <attribute name="version" />
     <attribute name="property" />
     <![CDATA[
      var id = attributes.get("id").trim();
      var name = attributes.get("name").trim();
      var version = attributes.get("version").trim();
      
      var needle = ' ';
      //var regex = new RegExp(needle,'g');
      var repl = '-';
      
      // removes quotes
      if(name.startsWith('"') && name.endsWith('"')) {
        name=name.substring(1,name.length()-1).trim();
      }
      if(id.startsWith('"') && id.endsWith('"')) {
        id=id.substring(1,id.length()-1).trim();
      }

      // remove brackets
      var start,end;
      while((start=name.indexOf('('))!=-1) {
        end=name.indexOf(')',start+1);
        if(end==-1) break;
        name=(name.substring(0,start) + name.substring(end+1)).trim();
      }

      // version
      if(version.startsWith('"') && version.endsWith('"')) {
        version=version.substring(1,version.length()-1).trim();
      }

      name=name.trim();
      name=name.replace(" ","-").toLowerCase();
      name=name.replace(" ","-"); // TODO make better but not with regex some ant version will fail
      name=name.replace(" ","-");
      name=name.replace(" ","-");
      name=name.replace(" ","-");
      name=name.replace(" ","-");

      project.setProperty(attributes.get("property"), id+"-"+version+".lex");
     ]]>
  </scriptdef>
 


  <target name="init">
    

    <property name="srcLoader" location="${rootDir}/loader/src/main/java"/>
    <property name="srcCore" location="${rootDir}/core/src/main/java"/>
    <property name="coreManifest" location="${srcCore}/META-INF/MANIFEST.MF"/>
    <property name="cache" location="${rootDir}/cache"/>
    <property name="trgLoader" location="${rootDir}/loader/target"/>
    <property name="trgCore" location="${rootDir}/core/target"/>
    <property name="srcCFML" location="${rootDir}/core/src/main/cfml"/>
    <property name="srcInst" location="${rootDir}/instrumentation/src/main/java"/> 
    <property name="ant" location="${rootDir}/ant"/>
    <property name="test" location="${rootDir}/test"/>
    <property name="temp" location="${rootDir}/temp"/>
    <property name="loader" location="${temp}/loader"/>
    <property name="core" location="${temp}/core"/>
    <!-- <property file="${rootDir}/build.properties"/> -->

 
    <!-- Create the time stamp -->
    <tstamp/>
    
    <!--<delete dir="${temp}"/>-->
    
    <!-- Create the  directory structure needed -->
    <mkdir dir="${core}"/>
    <mkdir dir="${loader}"/>
    <mkdir dir="${temp}/agent"/>
    <mkdir dir="${cache}"/>

  </target>




    <macrodef name="loadmf">
        <attribute name="jar"/>
        <attribute name="prefix" default=""/>
        <sequential>
            <loadproperties>
                <!-- Load the manifest entries -->
                <zipentry zipfile="@{jar}" name="META-INF/MANIFEST.MF"/>
                <!-- Add the prefix -->
                <filterchain>
                    <prefixlines prefix="@{prefix}"/>
                </filterchain>
            </loadproperties>
        </sequential>
    </macrodef> 
	
  <target name="_loader" depends="init" description="compile the source" >
    <echots message="compile loader"/>
    <!-- compie the source -->
    <javac 
      srcdir="${srcLoader}" 
      source="${javaVersion}" 
      target="${javaVersion}" 
      destdir="${temp}/loader"
      debug="true" debuglevel="lines,vars,source" classpath="${dependencies}">
    </javac>
    
    <!-- copy all non java files -->
    <copy todir="${temp}/loader">
      <fileset dir="${srcLoader}">
        <exclude name="**/*.java"/>
        <exclude name=".*"/>
      </fileset>
    </copy>

    <!-- set lucee/version file -->
    <currentTime property="ct" />
    <echo file="${temp}/loader/lucee/version" message="${version}:${ct}" encoding="UTF-8"/>


  </target>


  <target name="_core" depends="_loader" description="compile the source" >
    
    <echots message="compile core"/>
    <!-- set the loader as classpath -->
    <path id="classpath">
      <pathelement location="${temp}/loader" />
      <pathelement path="${dependencies}"/>
    </path>

    <!-- <pathconvert property="classpathProp" refid="classpath"/> -->
   
    <!-- compile the core -->
    <javac 
      srcdir="${srcCore}" 
      source="${javaVersion}" 
      target="${javaVersion}" 
      destdir="${core}"
      debug="true" debuglevel="lines,vars,source">
       <classpath refid="classpath" />
    </javac>

    <!-- copy all non java files -->
    <copy todir="${core}" overwrite="false">
      <fileset dir="${srcCore}">
        <exclude name="**/*.java"/>
        <exclude name=".*"/>
      </fileset>
    </copy>

    <!-- set date in default properties -->
    <loadfile property="defprop"
      srcFile="${core}/default.properties"/>
    <updatedate text="${defprop}" date="${NOW}" property="moddefprop" />
    <echo file="${core}/default.properties" message="${moddefprop}"/>

    <!-- create the manifest file -->
    <manifest file="${core}/META-INF/MANIFEST.MF" mode="update">
      <attribute name="Bundle-Version" value="${version}"/>
      <attribute name="Bundle-Name" value="${bundleName}"/>
      <attribute name="Bundle-SymbolicName" value="${bundleSymbolicName}"/>
      <attribute name="Bundle-ManifestVersion" value="2"/>
      <attribute name="Built-Date" value="${NOW}"/>
      <!-- <attribute name="State" value="${state}"/>
      <attribute name="Minor-Name" value="${name}"/>
      <attribute name="Minor-Name-Explanation" value="${name.explanation}"/>-->
    </manifest>
  </target>
 

  <target name="addFelix"> 

    <!-- Manifest need merging -->
    <loadproperties 
      srcFile="${srcLoader}/META-INF/MANIFEST.MF"
      prefix="mani.core."/>
    <manifest file="${goal}/META-INF/MANIFEST.MF" mode="update">
      <attribute name="Premain-Class" value="${mani.core.Premain-Class}"/>
      <attribute name="Agent-Class" value="${mani.core.Agent-Class}"/>
      <attribute name="Can-Redefine-Classes" value="${mani.core.Can-Redefine-Classes}"/>
      <attribute name="Can-Retransform-Classes" value="${mani.core.Can-Retransform-Classes}"/>
      <attribute name="Main-Class" value="${mani.core.Main-Class}"/>
      <attribute name="Bundle-Description" value="${mani.core.Bundle-Description}"/>
      <attribute name="Bundle-DocURL" value="${mani.core.Bundle-DocURL}"/>
      <attribute name="Bundle-License" value="${mani.core.Bundle-License}"/>
      <attribute name="Bundle-Vendor" value="${mani.core.Bundle-Vendor}"/>

      <attribute name="Built-By" value="Lucee build process"/>
      <attribute name="Created-By" value="Lucee build process"/>

    </manifest>
    <!-- TODO load dyn -->
  </target>

 

  <target name="setMvnEnv" description="set the variable right for ant">
    <property name="goal" location="${outputDir}"/>
  </target>

  <target name="buildLoaderMaven" depends="_core,setMvnEnv,addFelix" description="generate the loader jar" >  
    <echots message="build core"/>
    <!-- create the luce core -->
    <jar 
        basedir="${core}" 
        jarfile="${trgLoader}/${version}.lco" 
        manifest="${core}/META-INF/MANIFEST.MF"/>

    <!-- copy to core to the classes folder -->
    <copy 
        file="${trgLoader}/${version}.lco" 
        tofile="${outputDir}/core/core.lco"/>

    <pack200File file="${outputDir}/core/core.lco" doit="${pack200}"/>

    <!-- version -->
    <currentTime property="ct" />
    <echo file="${outputDir}/lucee/version" message="${version}:${ct}" encoding="UTF-8"/>

    
    <!--<delete dir="${temp}"/>-->
    <echots message="done with the ant part, now maven build the loader"/>
    
  </target>


  <target name="setAntEnv" description="set the variable right for ant">
    <echo>before:${goal}</echo>
    <property name="goal" location="${temp}/loader"/>
<echo>after:${goal}</echo>
    

  </target>

  <target name="buildLoaderAnt" depends="_core,setAntEnv,addFelix" description="generate the loader jar" >  
    <echots message="build core"/>
    
    <!-- create core -->
    <jar 
        basedir="${core}" 
        jarfile="${temp}/loader/core/core.lco" 
        manifest="${core}/META-INF/MANIFEST.MF"/> 



    <pack200File file="${temp}/loader/core/core.lco" doit="${pack200}"/>
    
    <!-- version -->
    <currentTime property="ct" />
    <echo file="${temp}/loader/lucee/version" message="${version}:${ct}" encoding="UTF-8"/>

    <!-- copy to core to the target folder -->
    <copy 
        file="${temp}/loader/core/core.lco" 
        tofile="${trgLoader}/${version}.lco"/>
    <copy 
        file="${temp}/loader/core/core.lco" 
        tofile="C:/lucee/tomcat/lucee-server/patches/${version}.lco"/>



    <!-- <delete dir="${temp}"/>-->
    <echots message="done"/>
    
  </target>

    <target name="restartLuceeEngine" depends="_core,setAntEnv,addFelix" description="generate the loader jar" >
    <echots message="restarting lucee engine"/>
    <get src="http://localhost:9988/restart-lucee.cfc?method=index" dest="C:/lucee/tomcat/webapps/ROOT/restarted.txt" />
    </target>

    <target name="buildFullLuceeJar">
    <echots message="build loader"/>
  
    <!-- genrates the jar from the loader -->
    <jar 
      basedir="${temp}/loader" 
      jarfile="${trgLoader}/lucee-${version}.jar" 
      manifest="${goal}/META-INF/MANIFEST.MF"/>
	</target>

</project>